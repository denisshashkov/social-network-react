{"version":3,"file":"static/js/483.c4660443.chunk.js","mappings":"4OAMMA,EAAoBC,EAAAA,KAAaC,MAAM,CAC3CC,QAASF,EAAAA,KAAaG,IAAI,GAAI,4BAkChC,EA/BuB,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cACxB,OACE,0BACE,SAAC,KAAD,CACEC,cAAe,CAAEC,GAAIC,KAAKC,MAAON,QAAS,IAC1CO,SAAUL,EACVM,iBAAkBX,EAHpB,SAKG,gBAAGY,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAAX,OACC,UAAC,KAAD,YACE,SAAC,KAAD,CACEC,UACEF,EAAOT,SAAWU,EAAQV,QAAUY,EAAAA,EAAAA,cAAwB,KAE9DC,YAAY,qBACZC,KAAK,UACLC,UAAU,aAEXN,EAAOT,SAAWU,EAAQV,SACzB,cAAGW,UAAWC,EAAAA,EAAAA,MAAd,SAA8BH,EAAOT,UACnC,MACJ,0BACE,SAACgB,EAAA,EAAD,CAAQC,KAAK,SAAb,6B,UC/Bd,EAAgC,kCAAhC,EAA2E,2BCY3E,EATmB,SAAC,GAAkB,IAAhBH,EAAe,EAAfA,KAChBI,EAAO,YADwB,EAATd,GAE1B,OACE,gBAAKO,UAAWC,EAAwB,IAAMA,EAA9C,UACE,SAAC,KAAD,CAASO,GAAID,EAAb,SAAoBJ,OCF1B,EAJsB,SAAC,GAAc,IAAZM,EAAW,EAAXA,KACvB,OAAO,yBAAMA,KCFf,EAA0B,yBAA1B,EAAoE,gCAApE,EAAqH,gCAArH,EAAyK,mCCqCzK,EA1BqC,SAACC,GACpC,IAAIC,EAAQD,EAAME,aACZC,EAAQF,EAAMG,YAAYC,KAAI,SAACC,GAAD,OAClC,SAAC,EAAD,CAAYb,KAAMa,EAAKb,KAAoBV,GAAIuB,EAAKvB,IAAlBuB,EAAKvB,OAGnCwB,EAAWN,EAAMM,SAASF,KAAI,SAAC1B,GAAD,OAClC,SAAC,EAAD,CAAeoB,KAAMpB,EAAQA,SAAcA,EAAQI,OAQrD,OACE,iBAAKO,UAAWC,EAAhB,WACE,iBAAKD,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,SAAyCY,KACzC,gBAAKb,UAAWC,EAAhB,SAA4CgB,QAE9C,SAAC,EAAD,CAAgB1B,cAXO,SAACF,EAAiB6B,GAC3CR,EAAMS,YAAY9B,GAClB6B,EAAYE,mB,oECpBZC,EAA6B,SAACV,GAAD,MAAY,CAC3CW,OAAQX,EAAMY,KAAKD,S,UCwBrB,GAAeE,E,QAAAA,KDrBiB,SAACC,GAAe,IACxCC,EADuC,0IAE3C,WACE,OAAKC,KAAKjB,MAAMY,QACT,SAACG,GAAD,UAAeE,KAAKjB,SADI,SAAC,KAAD,CAAUF,GAAI,eAHJ,GACboB,EAAAA,WAWhC,OAJqCC,EAAAA,EAAAA,IAAQR,EAARQ,CACnCH,MCcFG,EAAAA,EAAAA,KAlBsB,SAAClB,GACvB,MAAO,CACLC,aAAcD,EAAMC,aAEpBW,KAAMZ,EAAMY,KAAKD,WAIM,SAACQ,GAC1B,MAAO,CACLX,YAAa,SAAC9B,GACZyC,GAASC,EAAAA,EAAAA,GAAmB1C,SAKlC,CAGE2C,I,mBC/BF,KAAgB,MAAQ,0BAA0B,cAAgB,kCAAkC,SAAW,6BAA6B,kBAAoB,sCAAsC,eAAiB","sources":["components/Forms/AddMessageForm.jsx","webpack://social-network-react/./src/components/Dialogs/DialogItem/dialogItem.module.scss?300a","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/DialogMessage/DialogMessage.tsx","webpack://social-network-react/./src/components/Dialogs/dialogs.module.scss?e96b","components/Dialogs/Dialogs.tsx","hoc/authNavigate.js","components/Dialogs/DialogsContainer.tsx","webpack://social-network-react/./src/components/Forms/formStyles.module.scss?d171"],"sourcesContent":["import React from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport Button from \"../UI/button/Button\";\r\nimport classes from \"./formStyles.module.scss\";\r\n\r\nconst validationsSchema = Yup.object().shape({\r\n  message: Yup.string().max(50, \"Max length 50 symbols!\"),\r\n});\r\n\r\nconst AddMessageForm = ({ submitHandler }) => {\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{ id: Date.now(), message: \"\" }}\r\n        onSubmit={submitHandler}\r\n        validationSchema={validationsSchema}\r\n      >\r\n        {({ errors, touched }) => (\r\n          <Form>\r\n            <Field\r\n              className={\r\n                errors.message && touched.message ? classes.error__border : null\r\n              }\r\n              placeholder=\"Enter your message\"\r\n              name=\"message\"\r\n              component=\"textarea\"\r\n            />\r\n            {errors.message && touched.message ? (\r\n              <p className={classes.error}>{errors.message}</p>\r\n            ) : null}\r\n            <div>\r\n              <Button type=\"submit\">Send</Button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AddMessageForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs__item\":\"dialogItem_dialogs__item__WTLq8\",\"active\":\"dialogItem_active__jqnlR\"};","import React from \"react\";\r\nimport { NavLink } from \"react-router-dom\";\r\nimport classes from \"./dialogItem.module.scss\";\r\n\r\nconst DialogItem = ({ name, id }) => {\r\n  let path = \"/dialogs/\" + id;\r\n  return (\r\n    <div className={classes.dialogs__item + \" \" + classes.active}>\r\n      <NavLink to={path}>{name}</NavLink>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default DialogItem;\r\n","import React from \"react\";\r\n\r\nconst DialogMessage = ({ text }) => {\r\n  return <div>{text}</div>;\r\n};\r\n\r\nexport default DialogMessage;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"dialogs_dialogs__HIRlw\",\"dialogs__block\":\"dialogs_dialogs__block__-Gj3e\",\"dialogs__items\":\"dialogs_dialogs__items__wP+Lg\",\"dialogs__messages\":\"dialogs_dialogs__messages__07dsL\"};","import React from \"react\";\r\nimport AddMessageForm from \"../Forms/AddMessageForm\";\r\nimport DialogItem from \"./DialogItem/DialogItem\";\r\nimport DialogMessage from \"./DialogMessage/DialogMessage\";\r\nimport { messagesPageType } from \"../../types/types\";\r\nimport classes from \"./dialogs.module.scss\";\r\n\r\ntype PropsType = {\r\n  messagesPage: messagesPageType;\r\n  sendMessage: (message: string) => void;\r\n};\r\n\r\nconst Dialogs: React.FC<PropsType> = (props) => {\r\n  let state = props.messagesPage;\r\n  const items = state.dialogsData.map((item) => (\r\n    <DialogItem name={item.name} key={item.id} id={item.id} />\r\n  ));\r\n\r\n  const messages = state.messages.map((message) => (\r\n    <DialogMessage text={message.message} key={message.id} />\r\n  ));\r\n\r\n  const sendMessageHandler = (message: string, submitProps: any) => {\r\n    props.sendMessage(message);\r\n    submitProps.resetForm();\r\n  };\r\n\r\n  return (\r\n    <div className={classes.dialogs}>\r\n      <div className={classes.dialogs__block}>\r\n        <div className={classes.dialogs__items}>{items}</div>\r\n        <div className={classes.dialogs__messages}>{messages}</div>\r\n      </div>\r\n      <AddMessageForm submitHandler={sendMessageHandler} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Dialogs;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nlet mapStateToPropsForNavigate = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n});\r\n\r\nexport const withAuthNavigate = (Component) => {\r\n  class navigateComponent extends React.Component {\r\n    render() {\r\n      if (!this.props.isAuth) return <Navigate to={\"/login\"} />;\r\n      return <Component {...this.props} />;\r\n    }\r\n  }\r\n\r\n  let ConnectedAuthNavigateComponent = connect(mapStateToPropsForNavigate)(\r\n    navigateComponent\r\n  );\r\n\r\n  return ConnectedAuthNavigateComponent;\r\n};\r\n","import Dialogs from \"./Dialogs\";\r\nimport { withAuthNavigate } from \"../../hoc/authNavigate\";\r\nimport { sendMessageCreator } from \"../../redux/messagesReducer\";\r\nimport { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { AppStateType } from \"redux/redux-store\";\r\nimport { messagesPageType } from \"../../types/types\";\r\n\r\ntype MapStatePropsType = {\r\n  messagesPage: messagesPageType;\r\n  auth: boolean;\r\n};\r\n\r\nconst mapStateToProps = (state: AppStateType): MapStatePropsType => {\r\n  return {\r\n    messagesPage: state.messagesPage,\r\n    //newMessageBody: state.messagesPage.newMessageBody,\r\n    auth: state.auth.isAuth,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n  return {\r\n    sendMessage: (message: string) => {\r\n      dispatch(sendMessageCreator(message));\r\n    },\r\n  };\r\n};\r\n\r\nexport default compose(\r\n  withAuthNavigate,\r\n  connect(mapStateToProps, mapDispatchToProps)\r\n)(Dialogs);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"formStyles_error__e9G6r\",\"error__border\":\"formStyles_error__border__70zrh\",\"checkbox\":\"formStyles_checkbox__n5IBE\",\"checkbox__wrapper\":\"formStyles_checkbox__wrapper__Eq9xh\",\"input__wrapper\":\"formStyles_input__wrapper__YBA90\"};"],"names":["validationsSchema","Yup","shape","message","max","submitHandler","initialValues","id","Date","now","onSubmit","validationSchema","errors","touched","className","classes","placeholder","name","component","Button","type","path","to","text","props","state","messagesPage","items","dialogsData","map","item","messages","submitProps","sendMessage","resetForm","mapStateToPropsForNavigate","isAuth","auth","compose","Component","navigateComponent","this","React","connect","dispatch","sendMessageCreator","Dialogs"],"sourceRoot":""}