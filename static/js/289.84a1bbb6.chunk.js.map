{"version":3,"file":"static/js/289.84a1bbb6.chunk.js","mappings":"4OAoFA,EA/EkB,SAAC,GAAgC,IAA9BA,EAA6B,EAA7BA,cAAeC,EAAc,EAAdA,QAC5BC,EAAoBC,EAAAA,KAAaC,MAAM,CAC3CC,MAAOF,EAAAA,KAAaG,SAAS,kBAC7BC,SAAUJ,EAAAA,KAAaG,SAAS,oBAGlC,OACE,0BACE,SAAC,KAAD,CACEE,cAAe,CACbH,MAAO,GACPE,SAAU,GACVE,YAAY,EACZR,QAAS,IAEXS,SAAUV,EACVW,iBAAkBT,EARpB,SAUG,gBAAGU,EAAH,EAAGA,OAAQC,EAAX,EAAWA,QAASC,EAApB,EAAoBA,OAApB,OACC,UAAC,KAAD,YACE,0BACE,SAAC,KAAD,CACEC,YAAa,QACbC,KAAM,QACNC,UACEL,EAAOP,OAASQ,EAAQR,MAAQa,EAAAA,EAAAA,cAAwB,SAI7DN,EAAOP,OAASQ,EAAQR,OACvB,cAAGY,UAAWC,EAAAA,EAAAA,MAAd,SAA8BN,EAAOP,QACnC,MACJ,0BACE,SAAC,KAAD,CACEU,YAAa,WACbI,KAAM,WACNH,KAAM,WACNC,UACEL,EAAOL,UAAYM,EAAQN,SACvBW,EAAAA,EAAAA,cACA,SAITN,EAAOL,UAAYM,EAAQN,UAC1B,cAAGU,UAAWC,EAAAA,EAAAA,MAAd,SAA8BN,EAAOL,WACnC,MACJ,4BACE,SAAC,KAAD,CAAOY,KAAM,WAAYH,KAAM,eADjC,iBAKCf,IAAW,gBAAKmB,IAAKnB,EAASoB,IAAI,YAClCpB,IACC,0BACE,SAAC,KAAD,CACEc,YAAa,yBACbC,KAAM,UACNC,UACEL,EAAOX,SAAWY,EAAQZ,QACtBiB,EAAAA,EAAAA,cACA,SAMXJ,GAAS,cAAGG,UAAWC,EAAAA,EAAAA,MAAd,SAA8BJ,EAAOQ,QAAa,MAE5D,0BACE,mBAAQH,KAAK,SAAb,+B,oBCtCd,GAAeI,EAAAA,EAAAA,KALS,SAACC,GAAD,MAAY,CAClCC,OAAQD,EAAME,KAAKD,OACnBxB,QAASuB,EAAME,KAAKzB,WAGkB,CAAE0B,qBAAAA,EAAAA,IAA1C,EA/Bc,SAAC,GAA+C,IAA7CF,EAA4C,EAA5CA,OAAQE,EAAoC,EAApCA,qBAAsB1B,EAAc,EAAdA,QAc7C,OAAIwB,GACK,SAAC,KAAD,CAAUG,SAAO,EAACC,GAAG,cAI5B,4BACE,mCACA,SAAC,EAAD,CAAW7B,cApBO,SAAC,EAErB8B,GACI,IAFFzB,EAEC,EAFDA,MAAOE,EAEN,EAFMA,SAAUE,EAEhB,EAFgBA,WAAYR,EAE5B,EAF4BA,QAG/B0B,EACEtB,EACAE,EACAE,EACAqB,EAAYC,UACZ9B,IAWyCA,QAASA,W,mBC1BxD,KAAgB,MAAQ,0BAA0B,cAAgB","sources":["components/Forms/LoginForm.jsx","components/Login/Login.jsx","webpack://social-network-react/./src/components/Forms/formStyles.module.scss?d171"],"sourcesContent":["import React from \"react\";\r\nimport { Formik, Form, Field } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport classes from \"./formStyles.module.scss\";\r\n\r\nconst LoginForm = ({ submitHandler, captcha }) => {\r\n  const validationsSchema = Yup.object().shape({\r\n    email: Yup.string().required(\"Required field\"),\r\n    password: Yup.string().required(\"Required field\"),\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <Formik\r\n        initialValues={{\r\n          email: \"\",\r\n          password: \"\",\r\n          rememberMe: false,\r\n          captcha: \"\",\r\n        }}\r\n        onSubmit={submitHandler}\r\n        validationSchema={validationsSchema}\r\n      >\r\n        {({ errors, touched, status }) => (\r\n          <Form>\r\n            <div>\r\n              <Field\r\n                placeholder={\"Email\"}\r\n                name={\"email\"}\r\n                className={\r\n                  errors.email && touched.email ? classes.error__border : null\r\n                }\r\n              />\r\n            </div>\r\n            {errors.email && touched.email ? (\r\n              <p className={classes.error}>{errors.email}</p>\r\n            ) : null}\r\n            <div>\r\n              <Field\r\n                placeholder={\"Password\"}\r\n                type={\"password\"}\r\n                name={\"password\"}\r\n                className={\r\n                  errors.password && touched.password\r\n                    ? classes.error__border\r\n                    : null\r\n                }\r\n              />\r\n            </div>\r\n            {errors.password && touched.password ? (\r\n              <p className={classes.error}>{errors.password}</p>\r\n            ) : null}\r\n            <div>\r\n              <Field type={\"checkbox\"} name={\"rememberMe\"} />\r\n              Remember me\r\n            </div>\r\n\r\n            {captcha && <img src={captcha} alt=\"captcha\" />}\r\n            {captcha && (\r\n              <div>\r\n                <Field\r\n                  placeholder={\"Insert captcha symbols\"}\r\n                  name={\"captcha\"}\r\n                  className={\r\n                    errors.captcha && touched.captcha\r\n                      ? classes.error__border\r\n                      : null\r\n                  }\r\n                />\r\n              </div>\r\n            )}\r\n\r\n            {status ? <p className={classes.error}>{status.error}</p> : null}\r\n\r\n            <div>\r\n              <button type=\"submit\">Submit</button>\r\n            </div>\r\n          </Form>\r\n        )}\r\n      </Formik>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default LoginForm;\r\n","import { connect } from \"react-redux\";\r\nimport React from \"react\";\r\nimport LoginForm from \"../Forms/LoginForm\";\r\nimport { setLoginThunkCreator } from \"../../redux/authReducer\";\r\nimport { Navigate } from \"react-router-dom\";\r\n\r\nconst Login = ({ isAuth, setLoginThunkCreator, captcha }) => {\r\n  const submitHandler = (\r\n    { email, password, rememberMe, captcha },\r\n    submitProps\r\n  ) => {\r\n    setLoginThunkCreator(\r\n      email,\r\n      password,\r\n      rememberMe,\r\n      submitProps.setStatus,\r\n      captcha\r\n    );\r\n  };\r\n\r\n  if (isAuth) {\r\n    return <Navigate replace to=\"/profile\" />;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login</h1>\r\n      <LoginForm submitHandler={submitHandler} captcha={captcha} />\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isAuth: state.auth.isAuth,\r\n  captcha: state.auth.captcha,\r\n});\r\n\r\nexport default connect(mapStateToProps, { setLoginThunkCreator })(Login);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"error\":\"formStyles_error__e9G6r\",\"error__border\":\"formStyles_error__border__70zrh\"};"],"names":["submitHandler","captcha","validationsSchema","Yup","shape","email","required","password","initialValues","rememberMe","onSubmit","validationSchema","errors","touched","status","placeholder","name","className","classes","type","src","alt","error","connect","state","isAuth","auth","setLoginThunkCreator","replace","to","submitProps","setStatus"],"sourceRoot":""}